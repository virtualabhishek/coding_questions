// Two pointer method
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *ptr1=head, *ptr2=head;

        while(n)
        {
            ptr2=ptr2->next;
            n=n-1;
        }

        if(ptr2 == NULL)
        {
            return ptr1->next;
        }

        while(ptr2->next != NULL)
        {
            ptr1=ptr1->next;
            ptr2=ptr2->next;
        }

        ptr1->next=ptr1->next->next;

        return head;


    }
};


// /**
//  * Definition for singly-linked list.
//  * struct ListNode {
//  *     int val;
//  *     ListNode *next;
//  *     ListNode() : val(0), next(nullptr) {}
//  *     ListNode(int x) : val(x), next(nullptr) {}
//  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
//  * };
//  */
// class Solution {
// public:
//     ListNode* removeNthFromEnd(ListNode* head, int n) {
//         ListNode *ptr=head;

//         // Count nodes
//         int c=0;
//         while(ptr)
//         {
//             c=c+1;
//             ptr=ptr->next;
//         }

//         if(c==n)
//         {
//             return head->next;
//         }

//         // Traverse first k nodes
//         int k = c-n;
//         ptr=head;
//         while(k > 1)
//         {
//             ptr=ptr->next;
//             k=k-1;
//         }

//         ptr->next=ptr->next->next;

//         return head;
//     }
// };