class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:

        # BFS solution

        s = 0
        d = len(graph)-1
        queue = deque([[s]])
        result = []

        while queue:
            path = queue.popleft()

            if path[-1] == d:
                result.append(path)
                continue

            for neighbor in graph[path[-1]]:
                if neighbor in path:
                    continue
                t = path[:]
                t.append(neighbor)
                queue.append(t)

        return result


#         DFS solution
#
#         s = 0
#         d = len(graph)-1
#         stack = [[s]]
#         result = []

#         while stack:
#             path = stack.pop()

#             if path[-1] == d:
#                 result.append(path)
#                 continue

#             for neighbor in graph[path[-1]]:
#                 if neighbor in path:
#                     continue
#                 t = path[:]
#                 t.append(neighbor)
#                 stack.append(t)

#         return result