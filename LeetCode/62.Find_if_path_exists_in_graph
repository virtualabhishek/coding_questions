class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:

        # BFS solution

        adj_list = [[] for _ in range(n)]

        for x,y in edges:
            adj_list[x].append(y)
            adj_list[y].append(x)

        seen = set()
        queue = deque([source])

        while queue:

            node = queue.popleft()

            if(node == destination):
                return True

            if node in seen:
                continue

            seen.add(node)

            for neighbor in adj_list[node]:
                queue.append(neighbor)

        return False

#         DFS solution:
#
#         adj_list = [[] for _ in range(n)]

#         for x,y in edges:
#             adj_list[x].append(y)
#             adj_list[y].append(x)

#         seen = set()
#         stack = [source]

#         while stack:

#             node = stack.pop()

#             if(node == destination):
#                 return True

#             if node in seen:
#                 continue
#             seen.add(node)

#             for neighbor in adj_list[node]:
#                 stack.append(neighbor)

#         return False
