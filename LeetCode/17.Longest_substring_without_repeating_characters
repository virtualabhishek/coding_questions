class Solution {
public:
    int lengthOfLongestSubstring(string s) {

        int i=0;
        int max_count=0;
        int count = 0;
        unordered_map<char,int> m;

        while(i<s.size())
        {
            if(m[s[i]]==1) // if already exists
            {
                count=0;
                int j=i-1;
                while(s[j]!=s[i]) // track prev occurence
                {
                    j--;
                }
                i=j+1;
                m.clear();
            }
            else
            {
                ++m[s[i]];
                count++;
                i++;
            }

            max_count = (count>max_count)?count:max_count;
        }

        return max_count;
    }
};


// Brute force - finding in every possible combination
//
// class Solution {
// public:
//     int lengthOfLongestSubstring(string s) {

//         int max_count = 0;

//         for(int i=0;i<s.size();i++)
//         {
//             int count=0;
//             unordered_map<char,int> m;
//             for(int j=i;j<s.size();j++)
//             {
//                 if(m[s[j]]==1)
//                 {
//                     count=0;
//                     break;
//                 }
//                 else
//                 {
//                     ++m[s[j]];
//                     ++count;
//                 }

//                 max_count = (count>max_count)?count:max_count;
//             }
//         }

//         return max_count;

//     }
// };