class UnionFind:
    def __init__(self, n):
        self.root = [i for i in range(n)]

    def find(self, x):
            if(x==self.root[x]):
                return x
            self.root[x] = self.find(self.root[x])
            return self.root[x]

    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if rootX != rootY:
            self.root[rootY] = rootX

    def getResult(self):
        return len(set([self.find(i) for i in self.root]))



class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:

        n = len(isConnected)

        ob = UnionFind(n)

        for i in range(n):
            for j in range(n):
                if(i!=j and isConnected[i][j]==1):
                    ob.union(i,j)

        return ob.getResult()

