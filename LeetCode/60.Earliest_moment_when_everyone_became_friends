class UnionFind:
    def __init__(self, n):
        self.root = [i for i in range(n)]
        self.timestamp = [-1]*n

    def find(self, x):
        if(x == self.root[x]):
            return x
        self.root[x] = self.find(self.root[x])
        return self.root[x]

    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        if(rootX == rootY):
            return False
        if(rootX != rootY):
            self.root[rootY] = rootX
        return True


class Solution:
    def earliestAcq(self, logs: List[List[int]], n: int) -> int:
        ob = UnionFind(n)

        logs.sort(key = lambda log: log[0])

        grp_cnt = n

        for timestamp,x,y in logs:
            if ob.union(x,y):
                grp_cnt = grp_cnt - 1

            if grp_cnt == 1:
                return timestamp

        # There are still more than one groups left,
        #  i.e. not everyone is connected.
        return -1
